{
  "version": 2.0,
  "questions": [
    {
      "question": "What kind of data structure does IDDFS use?",
      "answers": {
        "a": "FIFO Queue",
        "b": "LIFO Queue (Stack)",
        "c": "Linked List",
        "d": "Heap"
      },
      "explanations": {
        "a": "",
        "b": "",
        "c": "",
        "d": ""
      },
      "correctAnswer": "b",
      "difficulty": "beginner"
    },
    {
      "question": "What does the iterative deepening part of IDDFS refer to?",
      "answers": {
        "a": "The search depth limit is increased incrementally after each iteration.",
        "b": "IDDFS re-starts the search from the root after each iteration.",
        "c": "IDDFS uses a breadth-first approach in each iteration.",
        "d": "IDDFS explores the entire search space before increasing the depth limit."
      },
      "explanations": {
        "a": "The iterative deepening refers to the fact that the search limit is progressively increased until the goal node is found.",
        "b": "Although IDDFS does restart the search from the root each time, this is not what the iterative deepening part refers to",
        "c": "IDDFS uses depth-first search at each level, not breadth-first search.",
        "d": "IDDFS does not explore the entire search space before increasing the depth limit; it increases the depth incrementally and performs depth-first search at each level."
      },
      "correctAnswer": "a",
      "difficulty": "beginner"
    },
    {
      "question": "What is the time complexity of IDDFS in terms of the branching factor (b) and the depth of the goal node (d)?",
      "answers": {
        "a": "O(b^d)",
        "b": "O(d^b)",
        "c": "O(d * b^d)",
        "d": "O(b^d * d)"
      },
      "explanations": {
        "a": "This is the correct answer. IDDFS has a time complexity of O(b^d), where b is the branching factor and d is the depth of the goal node, because at each depth limit, it explores all nodes at that level before moving deeper.",
        "b": "This is incorrect. The complexity is not d^b, as IDDFS does not explore nodes based on this combination.",
        "c": "This is incorrect. IDDFS does not have a time complexity of d * b^d.",
        "d": "This is incorrect. The time complexity is not b^d * d."
      },
      "correctAnswer": "a",
      "difficulty": "intermediate"
    },
    {
      "question": "When is IDDFS not complete?",
      "answers": {
        "a": "When the goal node is not reachable from the source vertex",
        "b": "When the state space is infinite",
        "c": "Either a) or b)",
        "d": "It is always complete"
      },
      "explanations": {
        "a": "IDDFS will not reach the goal node if it is not reachable from the source vertex.",
        "b": "IDDFS is complete for finite graphs, but not for infinite graphs.",
        "c": "Both a) and b) are cases where IDDFS is not complete.",
        "d": "IDDFS is not always complete, as it is not complete for cases where the goal node is not reachable from the source vertex or when the state space is infinite."
      },
      "correctAnswer": "c",
      "difficulty": "intermediate"
    },
    {
      "question": "In which cases would IDDFS be preferred over DFS?",
      "answers": {
        "a": "When memory usage needs to be controlled.",
        "b": "When the goal node is at a shallow depth and the graph has a high depth.",
        "c": "When the goal node is at a deep depth and the graph has a high branching factor.",
        "d": "It is never preffered over DFS."
      },
      "explanations": {
        "a": "Both have similar space complexity",
        "b": "If the goal node is located at a shallow depth within a graph that has a high depth, IDDFS would be more efficient than DFS in finding the solution, as it would not need to explore the entire depth of the graph.",
        "c": "The presence of a high branching factor in the graph may impact the efficiency of IDDFS, as it would need to explore more nodes at each depth limit iteration.",
        "d": ""
      },
      "correctAnswer": "b",
      "difficulty": "advanced"
    }
  ]
}